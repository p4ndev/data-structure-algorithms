using System.Text.Json;
var _chain = new SinglyLinkedList();

// ==================================================================================================================

AddLast(40, _chain);
AddFirst(20, _chain);
AddBefore(10, 20, _chain);
AddAfter(30, 20, _chain);
AddLast(50, _chain);

RemoveFirst(_chain);
RemoveAt(30, _chain);
RemoveLast(_chain);
RemoveAll(_chain);

// ==================================================================================================================

Console.WriteLine("Element(s): " + _chain.Count);
Console.WriteLine("-------------------------------");

Console.WriteLine(
    JsonSerializer.Serialize(
        _chain.Head,
        new JsonSerializerOptions {
            WriteIndented = true
        }
    )
);
Console.WriteLine("-------------------------------");

// ==================================================================================================================

static void RemoveFirst(SinglyLinkedList list) {
    if (IsEmptyOrNull(list)) return;            // Once it's empty or null, nothing
    var first = FirstOrDefault(list);     // Get first
    if (first is not null) {                    // When it's present
        var temp = first.Next;             // Get next occurrence
        list.Head = temp;                       // Place next at our new HEAD
        list.Count--;                           // Decrement global element counter
    }
}

static void RemoveLast(SinglyLinkedList list) {
    if (IsEmptyOrNull(list)) return;            // Empty or null, nothing
    var current = FirstOrDefault(list);    // First item for iteration
    while (current is not null){                // Iteration
        if (current.Next.Next is null){         // When current is penultimate
            current.Next = null;                    // Unlink last
            list.Count--;                           // Decrement global element counter
        }
        current = current.Next;                 // Fill next
    }
}

static void RemoveAt(int source, SinglyLinkedList list) {

    var current = SingleOrDefault(source, list);        // Find item as current
    if (current is null) return;

    var child = current.Next;                           // Place next into a child
    if (child is null){
        RemoveLast(list);
        return;
    }

    current.Data = child.Data;                               // Exchange from next to found
    current.Next = child.Next;                               // Unlink child ever
    list.Count--;                                            // Decrement global element counter

}

static void RemoveAll(SinglyLinkedList list) {
    list.Head = null;
    list.Count = 0;
}

// ==================================================================================================================

static void AddBefore(int data, int source, SinglyLinkedList list) {
    var current = SingleOrDefault(source, list);    // Find the node based on data
    if (current is not null){                            // Check if found

        var nextChain = current.Next;               // Store all elements on right
        var temp = new Node(source);                     // Temporary node with current data

        temp.Next    = nextChain;                        // Store all elements on temp
        current.Data = data;                             // Consider new data as prev requested
        current.Next = temp;                             // Swap next elements
        
        list.Count++;                                    // Increment global element counter

    }
}

static void AddAfter(int data, int source, SinglyLinkedList list) {
    var current = SingleOrDefault(source, list);    // Find the node based on data
    if (current is not null) {                            // Check if found
        
        var nextChain = current.Next;                // Only right elements, except current
        var temp = new Node(data);                        // New item to be inserted (temp)
        
        temp.Next = nextChain;                            // Move rest of elements to the new item (temp) 
        current.Next = temp;                              // Consider the temp our next elements
        
        list.Count++;                                     // Increment global element counter
        
    }
}

// ==================================================================================================================

static void AddFirst(int data, SinglyLinkedList list) {
    var temp  = new Node(data);  // Temporary NODE with data initialized
    temp.Next = list.Head;       // Move entire list as next of temporary NODE
    list.Head = temp;            // Consider the temporary NODE as our new list
    list.Count++;                // Increment global element counter
}

static void AddLast(int data, SinglyLinkedList list) {
    
    var temp = new Node(data);                  // Temporary node
    if (IsEmptyOrNull(list)){                   // Once list empty
        list.Head = temp;                           // Start it
        list.Count++;                               // Increment global element counter
        return;
    }

    var lastNode = LastOrDefault(list);         // Iterate until the end
    lastNode.Next = temp;                       // Consider the temporary as next
    list.Count++;                               // Increment global element counter
    
}

// ==================================================================================================================

static Node SingleOrDefault(int data, SinglyLinkedList list) {
    
    if (IsEmptyOrNull(list)) return null;                     // Once empty, null
    
    var temp = list.Head;                          // Get first for iteration
    if (temp.Data.Equals(data)) return temp;            // Check if data is present

    while (temp.Next is not null){                      // Iterate
        temp = temp.Next;                               // Next element
        if (temp.Data.Equals(data))                     // Check if data is present
            return temp;                                    // Once true, return node
    }

    return null;
    
}

static Node LastOrDefault(SinglyLinkedList list) {
    if (IsEmptyOrNull(list)) return null;      // Empty, quickly return null
    
    var temp = list.Head;           // First element, for iteration
    while (temp.Next is not null)           // Once has next, consider it
        temp = temp.Next;
    
    return temp;                        // It'll return null or the last
}

// ==================================================================================================================

static Node FirstOrDefault(SinglyLinkedList list) => list.Head;

static bool IsEmptyOrNull(SinglyLinkedList list) => list.Head is null;

// ==================================================================================================================

class Node { // Base
    public int Data { get; set; }
    public Node Next { get; set; }

    public Node(int data) {
        Data = data;
        Next = null;
    }

}

class SinglyLinkedList { // Usage
    public Node Head { get; set; }
    public int Count { get; set; } = 0;

}
